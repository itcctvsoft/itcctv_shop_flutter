import 'dart:convert';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shoplite/models/payment_transaction.dart';
import 'package:shoplite/repositories/payment_repository.dart';

class PaymentState {
  final bool isLoading;
  final String paymentUrl;
  final String? errorMessage;
  final PaymentTransaction? transaction;
  final String? orderId;

  PaymentState({
    this.isLoading = false,
    this.paymentUrl = "",
    this.errorMessage,
    this.transaction,
    this.orderId,
  });

  PaymentState copyWith({
    bool? isLoading,
    String? paymentUrl,
    String? errorMessage,
    PaymentTransaction? transaction,
    String? orderId,
  }) {
    return PaymentState(
      isLoading: isLoading ?? this.isLoading,
      paymentUrl: paymentUrl ?? this.paymentUrl,
      errorMessage: errorMessage,
      transaction: transaction ?? this.transaction,
      orderId: orderId ?? this.orderId,
    );
  }

  bool get isPaid => transaction?.isPaid ?? false;
}

class PaymentNotifier extends StateNotifier<PaymentState> {
  final PaymentRepository _repository;

  PaymentNotifier(this._repository) : super(PaymentState());

  Future<void> generateVNPayUrl(double amount) async {
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final String orderId = DateTime.now().millisecondsSinceEpoch.toString();
      print(
          "üîπ G·ª≠i y√™u c·∫ßu thanh to√°n VNPay: s·ªë ti·ªÅn $amount, m√£ ƒë∆°n h√†ng $orderId");

      final paymentUrl = await _repository.createVNPayPayment(amount, orderId);

      if (paymentUrl != null) {
        print("‚úÖ L·∫•y ƒë∆∞·ª£c URL thanh to√°n: $paymentUrl");
        state = state.copyWith(paymentUrl: paymentUrl, orderId: orderId);
      } else {
        print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL thanh to√°n");
        state =
            state.copyWith(errorMessage: "Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt thanh to√°n");
      }
    } catch (e) {
      print("‚ùå Exception: $e");
      state = state.copyWith(errorMessage: "L·ªói k·∫øt n·ªëi: $e");
    } finally {
      state = state.copyWith(isLoading: false);
    }
  }

  Future<void> checkPaymentStatus(String orderId) async {
    state = state.copyWith(isLoading: true, errorMessage: null);

    try {
      final transaction = await _repository.getPaymentStatus(orderId);
      if (transaction != null) {
        print("‚úÖ Thanh to√°n c√≥ tr·∫°ng th√°i: ${transaction.status}");
        state = state.copyWith(transaction: transaction, orderId: orderId);
      } else {
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n");
        state = state.copyWith(
            errorMessage:
                "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thanh to√°n cho ƒë∆°n h√†ng n√†y");
      }
    } catch (e) {
      print("‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n: $e");
      state = state.copyWith(
          errorMessage: "L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n");
    } finally {
      state = state.copyWith(isLoading: false);
    }
  }

  void resetPayment() {
    state = PaymentState();
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t k·∫øt qu·∫£ giao d·ªãch tr·ª±c ti·∫øp
  void setTransactionResult(PaymentTransaction transaction) {
    print(
        "‚úÖ C·∫≠p nh·∫≠t k·∫øt qu·∫£ giao d·ªãch: ${transaction.status}, isPaid=${transaction.isPaid}");
    state = state.copyWith(
      transaction: transaction,
      orderId: transaction.orderId,
    );
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ ƒë√°nh d·∫•u thanh to√°n th√†nh c√¥ng b·∫±ng orderId
  void setTransactionSuccessfulByOrderId(String orderId) {
    print("‚úÖ ƒê√°nh d·∫•u thanh to√°n th√†nh c√¥ng cho ƒë∆°n h√†ng: $orderId");

    // T·∫°o transaction ƒë∆°n gi·∫£n - s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·ªüi ph∆∞∆°ng th·ª©c setTransactionResult
    final transaction = PaymentTransaction(
      orderId: orderId,
      price: 0, // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
      status: 'Paid',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    // C·∫≠p nh·∫≠t state
    state = state.copyWith(
      transaction: transaction,
      orderId: orderId,
    );
  }
}

final paymentProvider =
    StateNotifierProvider<PaymentNotifier, PaymentState>((ref) {
  return PaymentNotifier(PaymentRepository());
});
