import 'dart:async';
import 'dart:io';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shoplite/constants/pref_data.dart';
import 'package:shoplite/models/chat_message.dart';
import 'package:shoplite/repositories/chat_repository.dart';

// Provider ƒë·ªÉ qu·∫£n l√Ω s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
final unreadMessagesProvider =
    StateNotifierProvider<UnreadMessagesNotifier, int>((ref) {
  return UnreadMessagesNotifier();
});

class UnreadMessagesNotifier extends StateNotifier<int> {
  UnreadMessagesNotifier() : super(0) {
    // Kh·ªüi t·∫°o v·ªõi vi·ªác l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
    _initUnreadCount();
    // Thi·∫øt l·∫≠p timer ƒë·ªÉ ƒë·ªãnh k·ª≥ ki·ªÉm tra tin nh·∫Øn m·ªõi
    _setupPollingTimer();
  }

  Timer? _pollingTimer;
  final ChatRepository _chatRepository = ChatRepository();
  bool _isInitialized = false;

  // Kh·ªüi t·∫°o s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
  Future<void> _initUnreadCount() async {
    if (_isInitialized) return;

    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) return;

    try {
      final result = await _chatRepository.getUnreadCount(token);
      if (result['success']) {
        state = result['unreadCount'];
      }
      _isInitialized = true;
    } catch (e) {
      debugPrint('L·ªói khi kh·ªüi t·∫°o s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: $e');
    }
  }

  // Thi·∫øt l·∫≠p timer ƒë·ªÉ ƒë·ªãnh k·ª≥ ki·ªÉm tra tin nh·∫Øn m·ªõi
  void _setupPollingTimer() {
    // Ki·ªÉm tra m·ªói 15 gi√¢y
    _pollingTimer = Timer.periodic(const Duration(seconds: 15), (_) async {
      await refreshUnreadCount();
    });
  }

  // L√†m m·ªõi s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
  Future<void> refreshUnreadCount() async {
    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) return;

    try {
      final result = await _chatRepository.getUnreadCount(token);
      if (result['success']) {
        state = result['unreadCount'];
      }
    } catch (e) {
      debugPrint('L·ªói khi l√†m m·ªõi s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: $e');
    }
  }

  // ƒê·∫∑t s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc v·ªÅ 0
  void resetUnreadCount() {
    state = 0;
  }

  // H·ªßy timer khi kh√¥ng c·∫ßn thi·∫øt n·ªØa
  @override
  void dispose() {
    _pollingTimer?.cancel();
    super.dispose();
  }
}

// Provider ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i chat (loading, error, success)
final chatStateProvider = StateProvider<String>((ref) => 'initial');

// Provider ƒë·ªÉ qu·∫£n l√Ω th√¥ng b√°o l·ªói
final chatErrorProvider = StateProvider<String?>((ref) => null);

// Provider ƒë·ªÉ qu·∫£n l√Ω danh s√°ch tin nh·∫Øn
final chatMessagesProvider =
    StateNotifierProvider<ChatMessagesNotifier, List<ChatMessage>>((ref) {
  return ChatMessagesNotifier(ref);
});

class ChatMessagesNotifier extends StateNotifier<List<ChatMessage>> {
  ChatMessagesNotifier(this.ref) : super([]) {
    // Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    _loadingStateGuard();
  }

  final Ref ref;
  final ChatRepository _chatRepository = ChatRepository();
  int? _chatId;
  bool _hasMore = false;
  int _currentPage = 1;
  bool _isLoading = false;
  Timer? _refreshTimer;
  Timer? _loadingTimeoutTimer; // Timer m·ªõi ƒë·ªÉ theo d√µi qu√° tr√¨nh loading

  // Th√™m c√°c h·∫±ng s·ªë ƒë·ªÉ qu·∫£n l√Ω cache
  static const String _cacheKey = 'chat_messages_cache';
  static const Duration _cacheValidityDuration = Duration(hours: 12);

  // Gi·ªõi h·∫°n th·ªùi gian t·ªëi ƒëa cho vi·ªác loading (25 gi√¢y)
  final _maxLoadingTime = Duration(seconds: 25);

  // ƒê·∫£m b·∫£o _isLoading lu√¥n ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ false sau m·ªôt kho·∫£ng th·ªùi gian
  void _loadingStateGuard() {
    // Kh·ªüi t·∫°o m·ªôt b·ªô ƒë·∫øm th·ªùi gian an to√†n, ƒë·∫£m b·∫£o kh√¥ng bao gi·ªù b·ªã treo ·ªü loading v√¥ t·∫≠n
    Timer.periodic(Duration(seconds: 30), (timer) {
      if (_isLoading) {
        debugPrint('‚ö° ChatProvider: GUARD - Force reset loading state');
        _isLoading = false;
        ref.read(chatStateProvider.notifier).state = 'error';
        ref.read(chatErrorProvider.notifier).state =
            'Qu√° tr√¨nh t·∫£i d·ªØ li·ªáu qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i.';
      }
    });
  }

  // Getters
  bool get hasMore => _hasMore;
  int? get chatId => _chatId;
  bool get isLoading => _isLoading;

  // Kh·ªüi t·∫°o timer ƒë·ªÉ ƒë·ªãnh k·ª≥ t·∫£i tin nh·∫Øn m·ªõi
  void _setupRefreshTimer() {
    _refreshTimer?.cancel();
    _refreshTimer = Timer.periodic(const Duration(seconds: 10), (_) {
      if (!_isLoading) {
        _refreshMessages();
      }
    });
  }

  // H·ªßy timer khi kh√¥ng c·∫ßn thi·∫øt n·ªØa
  @override
  void dispose() {
    _refreshTimer?.cancel();
    _loadingTimeoutTimer?.cancel();
    super.dispose();
  }

  // Reset tr·∫°ng th√°i chat ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i
  void resetState() {
    debugPrint('üîÑ ChatProvider: Reset tr·∫°ng th√°i chat');

    // Force h·ªßy b·ªè t·∫•t c·∫£ c√°c operation ƒëang ch·∫°y
    _loadingTimeoutTimer?.cancel();

    // Force reset loading state ngay l·∫≠p t·ª©c
    _isLoading = false;

    // Reset tr·∫°ng th√°i UI
    ref.read(chatStateProvider.notifier).state = 'initial';
    ref.read(chatErrorProvider.notifier).state = null;

    // Reset pagination
    _hasMore = false;
    _currentPage = 1;

    // Kh√¥ng reset _chatId ƒë·ªÉ gi·ªØ cu·ªôc tr√≤ chuy·ªán

    // ƒê·∫∑t l·∫°i th·ªùi gian timeout m·ªõi cho l·∫ßn ch·∫°y ti·∫øp theo
    _loadingTimeoutTimer = Timer(_maxLoadingTime, () {
      debugPrint('‚è±Ô∏è ChatProvider: Timeout timer after resetState');
      if (_isLoading) {
        _isLoading = false;
        ref.read(chatErrorProvider.notifier).state =
            "Qu√° th·ªùi gian ch·ªù ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.";
        ref.read(chatStateProvider.notifier).state = 'error';
      }
    });
  }

  // L√†m m·ªõi tin nh·∫Øn m√† kh√¥ng thay ƒë·ªïi tr·∫°ng th√°i UI
  Future<void> _refreshMessages() async {
    if (_chatId == null) return;

    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) return;

    try {
      final result = await _chatRepository.getChatHistory(token, _chatId!,
          page: 1, perPage: 20);
      if (result['success'] && result['messages'] != null) {
        final newMessages = List<ChatMessage>.from(result['messages']);

        if (newMessages.isNotEmpty) {
          // Ki·ªÉm tra xem c√≥ tin nh·∫Øn m·ªõi kh√¥ng
          if (state.isEmpty || newMessages.first.id != state.first.id) {
            // C·∫≠p nh·∫≠t danh s√°ch tin nh·∫Øn
            state = newMessages;
            // ƒê·∫∑t s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc v·ªÅ 0
            ref.read(unreadMessagesProvider.notifier).resetUnreadCount();
          }
        }
      }
    } catch (e) {
      debugPrint('‚ùå ChatProvider: L·ªói khi l√†m m·ªõi tin nh·∫Øn: $e');
    }
  }

  // Kh·ªüi t·∫°o ho·∫∑c l·∫•y cu·ªôc tr√≤ chuy·ªán
  Future<void> initChat() async {
    if (_isLoading) {
      debugPrint('‚ö†Ô∏è ChatProvider: ƒêang t·∫£i, b·ªè qua y√™u c·∫ßu initChat m·ªõi');
      return;
    }

    debugPrint('üöÄ ChatProvider: B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o chat...');
    _isLoading = true;
    ref.read(chatStateProvider.notifier).state = 'loading';

    // T·∫°o m·ªôt timeout ƒë·ªÉ tr√°nh treo v√¥ t·∫≠n
    _loadingTimeoutTimer?.cancel();
    _loadingTimeoutTimer = Timer(_maxLoadingTime, () {
      debugPrint(
          '‚è±Ô∏è ChatProvider: initChat timeout sau ${_maxLoadingTime.inSeconds} gi√¢y');
      if (_isLoading) {
        _isLoading = false;
        ref.read(chatErrorProvider.notifier).state =
            "Qu√° th·ªùi gian ch·ªù ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.";
        ref.read(chatStateProvider.notifier).state = 'error';
      }
    });

    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i sau kho·∫£ng th·ªùi gian t·ªëi ƒëa b·∫•t k·ªÉ k·∫øt qu·∫£
    Future.delayed(_maxLoadingTime + Duration(seconds: 5), () {
      if (_isLoading) {
        debugPrint('‚ö†Ô∏è ChatProvider: Force reset loading state after max time');
        _isLoading = false;
      }
    });

    // X·ª≠ l√Ω kh·ªüi t·∫°o chat trong try-catch-finally
    try {
      final token = await PrefData.getToken();
      if (token == null || token.isEmpty) {
        throw Exception("Token kh√¥ng h·ª£p l·ªá");
      }

      debugPrint('üîÑ ChatProvider: G·ªçi API getOrCreateSupportChat...');

      // ƒê·∫∑t timeout cho API call
      final result = await _chatRepository
          .getOrCreateSupportChat(token)
          .timeout(Duration(seconds: 15), onTimeout: () {
        throw TimeoutException(
            'K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau.');
      });

      // Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ
      if (!result['success']) {
        throw Exception(result['message'] ?? 'L·ªói khi kh·ªüi t·∫°o chat');
      }

      // N·∫øu th√†nh c√¥ng, c·∫≠p nh·∫≠t chat ID
      _chatId = result['chatId'];
      debugPrint('‚úÖ ChatProvider: Kh·ªüi t·∫°o chat th√†nh c√¥ng, chatId=$_chatId');

      // T·∫£i tin nh·∫Øn
      await loadMessages();

      // Thi·∫øt l·∫≠p timer ƒë·ªÉ ƒë·ªãnh k·ª≥ t·∫£i tin nh·∫Øn m·ªõi
      _setupRefreshTimer();
    } catch (e) {
      // X·ª≠ l√Ω l·ªói
      debugPrint('‚ùå ChatProvider: Exception khi kh·ªüi t·∫°o chat: $e');
      String errorMessage = "L·ªói k·∫øt n·ªëi: ${e.toString()}";

      if (e is SocketException) {
        errorMessage =
            "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.";
      } else if (e is TimeoutException) {
        errorMessage =
            "K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau.";
      }

      ref.read(chatErrorProvider.notifier).state = errorMessage;
      ref.read(chatStateProvider.notifier).state = 'error';
    } finally {
      // ƒê·∫£m b·∫£o lu√¥n reset loading state v√† h·ªßy timer
      _isLoading = false;
      _loadingTimeoutTimer?.cancel();
      debugPrint('üèÅ ChatProvider: K·∫øt th√∫c qu√° tr√¨nh kh·ªüi t·∫°o chat');
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫£i tin nh·∫Øn t·ª´ cache
  Future<bool> loadCachedMessages() async {
    try {
      debugPrint('üîç ChatProvider: ƒêang t√¨m tin nh·∫Øn trong cache...');

      // T·∫£i tin nh·∫Øn t·ª´ SharedPreferences
      final prefs = await PrefData.getPrefInstance();
      final cachedData = prefs.getString(_cacheKey);
      if (cachedData == null || cachedData.isEmpty) {
        debugPrint('‚ùå ChatProvider: Kh√¥ng t√¨m th·∫•y tin nh·∫Øn trong cache');
        return false;
      }

      // Parse d·ªØ li·ªáu cache
      final cacheMap = json.decode(cachedData) as Map<String, dynamic>;

      // Ki·ªÉm tra th·ªùi gian cache c√≥ h·ª£p l·ªá kh√¥ng
      final cachedTime = DateTime.parse(cacheMap['timestamp']);
      final now = DateTime.now();

      if (now.difference(cachedTime) > _cacheValidityDuration) {
        debugPrint('‚ö†Ô∏è ChatProvider: Cache ƒë√£ h·∫øt h·∫°n, c·∫ßn l√†m m·ªõi');
        return false;
      }

      // T·∫£i chat_id t·ª´ cache
      _chatId = cacheMap['chat_id'];

      // Parse v√† t·∫°o danh s√°ch tin nh·∫Øn t·ª´ cache
      final List<dynamic> messagesJson = cacheMap['messages'];
      if (messagesJson.isEmpty) {
        debugPrint('‚ÑπÔ∏è ChatProvider: Cache r·ªóng, kh√¥ng c√≥ tin nh·∫Øn');
        return false;
      }

      try {
        final messages =
            messagesJson.map((json) => ChatMessage.fromJson(json)).toList();

        // C·∫≠p nh·∫≠t state v·ªõi tin nh·∫Øn t·ª´ cache
        state = messages;

        debugPrint(
            '‚úÖ ChatProvider: ƒê√£ t·∫£i ${messages.length} tin nh·∫Øn t·ª´ cache');
        return true;
      } catch (e) {
        debugPrint('‚ùå ChatProvider: L·ªói khi parse tin nh·∫Øn t·ª´ cache: $e');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå ChatProvider: L·ªói khi t·∫£i tin nh·∫Øn t·ª´ cache: $e');
      return false;
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ l∆∞u tin nh·∫Øn v√†o cache
  Future<void> _saveChatMessagesToCache() async {
    try {
      // Ch·ªâ l∆∞u v√†o cache n·∫øu c√≥ tin nh·∫Øn v√† chat_id h·ª£p l·ªá
      if (state.isEmpty || _chatId == null) {
        debugPrint('‚ÑπÔ∏è ChatProvider: Kh√¥ng c√≥ tin nh·∫Øn ƒë·ªÉ l∆∞u v√†o cache');
        return;
      }

      // T·∫°o d·ªØ li·ªáu cache
      final cacheMap = {
        'timestamp': DateTime.now().toIso8601String(),
        'chat_id': _chatId,
        'messages': state.map((msg) => msg.toJson()).toList(),
      };

      // L∆∞u v√†o SharedPreferences
      final prefs = await PrefData.getPrefInstance();
      final cacheString = json.encode(cacheMap);
      await prefs.setString(_cacheKey, cacheString);

      debugPrint('‚úÖ ChatProvider: ƒê√£ l∆∞u ${state.length} tin nh·∫Øn v√†o cache');
    } catch (e) {
      debugPrint('‚ùå ChatProvider: L·ªói khi l∆∞u tin nh·∫Øn v√†o cache: $e');
    }
  }

  // T·∫£i tin nh·∫Øn t·ª´ server v·ªõi retry
  Future<void> loadMessages() async {
    if (_isLoading) {
      debugPrint('‚ö†Ô∏è ChatProvider: ƒêang t·∫£i, b·ªè qua y√™u c·∫ßu loadMessages m·ªõi');
      return;
    }

    _isLoading = true;
    ref.read(chatStateProvider.notifier).state = 'loading';

    // Thi·∫øt l·∫≠p timer timeout
    _loadingTimeoutTimer?.cancel();
    _loadingTimeoutTimer = Timer(_maxLoadingTime, () {
      if (_isLoading) {
        debugPrint('‚è±Ô∏è ChatProvider: Timeout khi t·∫£i tin nh·∫Øn');
        _isLoading = false;
        ref.read(chatErrorProvider.notifier).state =
            "Qu√° th·ªùi gian ch·ªù ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.";
        ref.read(chatStateProvider.notifier).state = 'error';
      }
    });

    try {
      final token = await PrefData.getToken();
      if (token == null || token.isEmpty) {
        throw Exception('Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      }

      // T√¨m cu·ªôc tr√≤ chuy·ªán h·ªó tr·ª£ ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
      if (_chatId == null) {
        final result = await _chatRepository.getOrCreateSupportChat(token);
        if (!result['success']) {
          throw Exception(result['message']);
        }
        _chatId = result['chatId'];

        if (_chatId == null) {
          throw Exception('Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán');
        }
      }

      // T·∫£i l·ªãch s·ª≠ tin nh·∫Øn
      final result = await _chatRepository.getChatHistory(
        token,
        _chatId!,
        page: 1,
        perPage: 20,
      );

      if (!result['success']) {
        throw Exception(result['message']);
      }

      // X·ª≠ l√Ω tin nh·∫Øn
      final messagesCount =
          result['messages'] != null ? (result['messages'] as List).length : 0;
      debugPrint(
          '‚úÖ ChatProvider: T·∫£i tin nh·∫Øn th√†nh c√¥ng, s·ªë l∆∞·ª£ng: $messagesCount');

      // L∆∞u c√°c th√¥ng tin ph√¢n trang
      _hasMore = result['hasMore'] ?? false;
      _currentPage =
          result['nextPage'] != null ? 1 : 1; // Reset page n·∫øu l√† t·∫£i m·ªõi
      debugPrint('üìä ChatProvider: hasMore=$_hasMore, nextPage=$_currentPage');

      // C·∫≠p nh·∫≠t state
      if (messagesCount == 0) {
        // N·∫øu kh√¥ng c√≥ tin nh·∫Øn, tr·∫£ v·ªÅ m·ªôt danh s√°ch r·ªóng
        debugPrint('‚ÑπÔ∏è ChatProvider: Kh√¥ng c√≥ tin nh·∫Øn ƒë·ªÉ hi·ªÉn th·ªã');
        state = [];
      } else {
        try {
          // API tr·∫£ v·ªÅ tin nh·∫Øn x·∫øp t·ª´ m·ªõi ƒë·∫øn c≈©
          final messages = List<ChatMessage>.from(result['messages']);
          state = messages;
          debugPrint(
              '‚úÖ ChatProvider: ƒê√£ c·∫≠p nh·∫≠t ${messages.length} tin nh·∫Øn v√†o state');

          // L∆∞u tin nh·∫Øn v√†o cache sau khi t·∫£i th√†nh c√¥ng
          _saveChatMessagesToCache();
        } catch (parseError) {
          debugPrint('‚ùå ChatProvider: L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: $parseError');
          throw Exception("L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu tin nh·∫Øn: $parseError");
        }
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
      ref.read(chatStateProvider.notifier).state = 'success';
    } catch (e) {
      // X·ª≠ l√Ω l·ªói
      debugPrint('‚ùå ChatProvider: Exception khi t·∫£i tin nh·∫Øn: $e');
      String errorMessage = "L·ªói t·∫£i tin nh·∫Øn: ${e.toString()}";

      if (!e.toString().contains("token")) {
        errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.";
      }

      ref.read(chatErrorProvider.notifier).state = errorMessage;
      ref.read(chatStateProvider.notifier).state = 'error';
    } finally {
      // Hu·ª∑ timer timeout v√† reset tr·∫°ng th√°i loading
      _loadingTimeoutTimer?.cancel();
      _isLoading = false;
    }
  }

  // T·∫£i th√™m tin nh·∫Øn c≈© h∆°n
  Future<void> loadMoreMessages() async {
    if (_isLoading) return;

    // Ki·ªÉm tra chat_id v√† hasMore
    if (!_hasMore) {
      debugPrint('ChatProvider: Kh√¥ng c√≤n tin nh·∫Øn c≈© h∆°n ƒë·ªÉ t·∫£i');
      return;
    }

    _isLoading = true;

    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) {
      debugPrint('ChatProvider: Token kh√¥ng h·ª£p l·ªá khi t·∫£i th√™m tin nh·∫Øn');
      _isLoading = false;
      return;
    }

    // ƒê·∫£m b·∫£o c√≥ chat_id
    if (_chatId == null) {
      debugPrint(
          'ChatProvider: Kh√¥ng c√≥ chat_id khi t·∫£i th√™m tin nh·∫Øn, ƒëang kh·ªüi t·∫°o...');
      try {
        final result = await _chatRepository.getOrCreateSupportChat(token);
        if (result['success']) {
          _chatId = result['chatId'];
          debugPrint('ChatProvider: ƒê√£ kh·ªüi t·∫°o chat m·ªõi, chatId=$_chatId');
        } else {
          debugPrint(
              'ChatProvider: Kh√¥ng th·ªÉ kh·ªüi t·∫°o chat khi t·∫£i th√™m: ${result['message']}');
          _isLoading = false;
          return;
        }
      } catch (e) {
        debugPrint('ChatProvider: L·ªói khi kh·ªüi t·∫°o chat: $e');
        _isLoading = false;
        return;
      }
    }

    try {
      final nextPage = _currentPage + 1;
      debugPrint(
          'ChatProvider: ƒêang t·∫£i th√™m tin nh·∫Øn, trang $nextPage cho chatId=$_chatId');

      final result = await _chatRepository.getChatHistory(
        token,
        _chatId!,
        page: nextPage,
        perPage: 20,
      );

      if (result['success']) {
        debugPrint('ChatProvider: T·∫£i th√™m tin nh·∫Øn th√†nh c√¥ng');
        final oldMessages = List<ChatMessage>.from(result['messages']);

        if (oldMessages.isEmpty) {
          debugPrint('ChatProvider: Kh√¥ng c√≤n tin nh·∫Øn c≈© h∆°n');
          _hasMore = false;
        } else {
          // C·∫≠p nh·∫≠t state v·ªõi tin nh·∫Øn c≈© ƒë∆∞·ª£c n·ªëi v√†o danh s√°ch hi·ªán t·∫°i
          state = [...state, ...oldMessages];

          _hasMore = result['hasMore'] ?? false;
          _currentPage = result['nextPage'] != null ? nextPage : _currentPage;

          debugPrint(
              'ChatProvider: ƒê√£ t·∫£i th√™m ${oldMessages.length} tin nh·∫Øn, t·ªïng c·ªông ${state.length} tin nh·∫Øn');
        }
      } else {
        debugPrint(
            'ChatProvider: L·ªói khi t·∫£i th√™m tin nh·∫Øn: ${result['message']}');
      }
    } catch (e) {
      debugPrint('ChatProvider: L·ªói khi t·∫£i th√™m tin nh·∫Øn: $e');
    } finally {
      _isLoading = false;
    }
  }

  // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c g·ª≠i tin nh·∫Øn ƒë·ªÉ l∆∞u v√†o cache sau khi g·ª≠i th√†nh c√¥ng
  Future<bool> sendMessage(String message, {String? userPhotoUrl}) async {
    if (_chatId == null || message.trim().isEmpty) return false;

    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) return false;

    try {
      // N·∫øu c√≥ userPhotoUrl, t·∫°o m·ªôt user object ƒë·ªÉ ƒë√≠nh k√®m v√†o tin nh·∫Øn
      Map<String, dynamic>? userInfo;
      if (userPhotoUrl != null && userPhotoUrl.isNotEmpty) {
        userInfo = {
          'photo': userPhotoUrl,
        };
      }

      final result = await _chatRepository.sendTextMessage(
        token,
        _chatId!,
        message,
        userInfo: userInfo,
      );

      if (result['success']) {
        await loadMessages();
        return true;
      } else {
        debugPrint('ChatProvider: L·ªói khi g·ª≠i tin nh·∫Øn: ${result['message']}');
        return false;
      }
    } catch (e) {
      debugPrint('L·ªói khi g·ª≠i tin nh·∫Øn: $e');
      return false;
    }
  }

  // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c g·ª≠i tin nh·∫Øn c√≥ ƒë√≠nh k√®m ƒë·ªÉ l∆∞u v√†o cache sau khi g·ª≠i th√†nh c√¥ng
  Future<bool> sendMessageWithAttachment(String? message, File attachment,
      {String? userPhotoUrl}) async {
    if (_chatId == null) return false;

    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) return false;

    try {
      debugPrint(
          'üì§ ChatProvider: G·ª≠i tin nh·∫Øn c√≥ ƒë√≠nh k√®m t·ªõi chatId=$_chatId');
      if (message != null && message.isNotEmpty) {
        debugPrint('üì§ ChatProvider: V·ªõi n·ªôi dung: "$message"');
      }
      debugPrint('üì§ ChatProvider: ƒê∆∞·ªùng d·∫´n file: ${attachment.path}');

      // Ki·ªÉm tra k√≠ch th∆∞·ªõc file, n·∫øu qu√° l·ªõn th√¨ resize
      final fileSize = await attachment.length();
      debugPrint(
          'üì§ ChatProvider: K√≠ch th∆∞·ªõc file: ${(fileSize / 1024).toStringAsFixed(2)} KB');

      // N·∫øu l√† h√¨nh ·∫£nh v√† k√≠ch th∆∞·ªõc qu√° l·ªõn, th·ª≠ g·ª≠i d∆∞·ªõi d·∫°ng base64
      final fileName = attachment.path.split('/').last.toLowerCase();
      final isImage = fileName.endsWith('.jpg') ||
          fileName.endsWith('.jpeg') ||
          fileName.endsWith('.png') ||
          fileName.endsWith('.gif') ||
          fileName.endsWith('.webp');

      final shouldUseBase64 =
          isImage && fileSize > 1024 * 1024 * 2; // N·∫øu l·ªõn h∆°n 2MB

      // N·∫øu c√≥ userPhotoUrl, t·∫°o m·ªôt user object ƒë·ªÉ ƒë√≠nh k√®m v√†o tin nh·∫Øn
      Map<String, dynamic>? userInfo;
      if (userPhotoUrl != null && userPhotoUrl.isNotEmpty) {
        userInfo = {
          'photo': userPhotoUrl,
        };
      }

      Map<String, dynamic> result;

      if (shouldUseBase64) {
        // ƒê·ªçc file d∆∞·ªõi d·∫°ng base64
        final bytes = await attachment.readAsBytes();
        final base64Image = base64Encode(bytes);

        debugPrint(
            'üì§ ChatProvider: G·ª≠i h√¨nh ·∫£nh d∆∞·ªõi d·∫°ng base64, ƒë·ªô d√†i: ${base64Image.length} k√Ω t·ª±');

        result = await _chatRepository.sendImageBase64(
            token, _chatId!, message, base64Image, fileName,
            userInfo: userInfo);
      } else {
        // G·ª≠i file ƒë√≠nh k√®m b√¨nh th∆∞·ªùng
        result = await _chatRepository.sendMessageWithAttachment(
          token,
          _chatId!,
          message,
          attachment,
          userInfo: userInfo,
        );
      }

      if (result['success']) {
        debugPrint('‚úÖ ChatProvider: G·ª≠i tin nh·∫Øn ƒë√≠nh k√®m th√†nh c√¥ng');
        await loadMessages();
        return true;
      } else {
        debugPrint(
            '‚ùå ChatProvider: L·ªói khi g·ª≠i tin nh·∫Øn ƒë√≠nh k√®m: ${result['message']}');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå ChatProvider: Exception khi g·ª≠i tin nh·∫Øn ƒë√≠nh k√®m: $e');
      return false;
    }
  }

  // G·ª≠i h√¨nh ·∫£nh base64 ri√™ng (kh√¥ng s·ª≠ d·ª•ng File)
  Future<bool> sendBase64Image(
      String? message, String base64Image, String imageName) async {
    if (_chatId == null) return false;

    final token = await PrefData.getToken();
    if (token == null || token.isEmpty) return false;

    try {
      debugPrint('üì§ ChatProvider: G·ª≠i h√¨nh ·∫£nh base64 t·ªõi chatId=$_chatId');
      if (message != null && message.isNotEmpty) {
        debugPrint('üì§ ChatProvider: V·ªõi n·ªôi dung: "$message"');
      }

      final result = await _chatRepository.sendImageBase64(
          token, _chatId!, message, base64Image, imageName);

      if (result['success']) {
        debugPrint('‚úÖ ChatProvider: G·ª≠i h√¨nh ·∫£nh base64 th√†nh c√¥ng');
        await loadMessages();
        return true;
      } else {
        debugPrint(
            '‚ùå ChatProvider: L·ªói khi g·ª≠i h√¨nh ·∫£nh base64: ${result['message']}');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå ChatProvider: Exception khi g·ª≠i h√¨nh ·∫£nh base64: $e');
      return false;
    }
  }
}
