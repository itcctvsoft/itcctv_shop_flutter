import 'dart:convert';
import 'dart:io';
import 'dart:async';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:shoplite/constants/apilist.dart';
import 'package:shoplite/models/chat_message.dart';

class ChatRepository {
  // Singleton pattern
  static final ChatRepository _instance = ChatRepository._internal();
  factory ChatRepository() => _instance;
  ChatRepository._internal();

  final Dio _dio = Dio();

  // L·∫•y ho·∫∑c t·∫°o cu·ªôc tr√≤ chuy·ªán v·ªõi admin
  Future<Map<String, dynamic>> getOrCreateSupportChat(String token) async {
    try {
      debugPrint('ChatRepository: ƒêang t·∫°o/l·∫•y chat h·ªó tr·ª£');

      final response = await http.post(
        Uri.parse(api_chat_get_or_create),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      debugPrint('ChatRepository: Status code: ${response.statusCode}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        debugPrint('ChatRepository: Ph·∫£n h·ªìi th√†nh c√¥ng: $responseData');
        return {
          'success': true,
          'chatId': responseData['data']['chat_id'],
        };
      } else {
        debugPrint('ChatRepository: L·ªói khi l·∫•y chat: ${response.body}');
        return {
          'success': false,
          'message': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£',
          'error': response.body,
        };
      }
    } catch (e) {
      debugPrint('ChatRepository: Exception: $e');
      return {
        'success': false,
        'message': 'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi m√°y ch·ªß',
        'error': e.toString(),
      };
    }
  }

  // G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
  Future<Map<String, dynamic>> sendTextMessage(
      String token, int chatId, String message,
      {Map<String, dynamic>? userInfo}) async {
    try {
      debugPrint('üì§ ChatRepository: ƒêang g·ª≠i tin nh·∫Øn ƒë·∫øn chatId=$chatId');
      debugPrint('üì§ ChatRepository: N·ªôi dung: "$message"');
      debugPrint('üì§ ChatRepository: URL API - ${api_chat_send}');

      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server
      var requestData = {
        'chat_id': chatId,
        'message': message,
      };

      // Th√™m th√¥ng tin userInfo n·∫øu c√≥
      if (userInfo != null) {
        requestData['user_info'] = userInfo;
      }

      final response = await http
          .post(
        Uri.parse(api_chat_send),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: json.encode(requestData),
      )
          .timeout(Duration(seconds: 10), onTimeout: () {
        debugPrint('‚è±Ô∏è ChatRepository: Timeout khi g·ª≠i tin nh·∫Øn');
        throw TimeoutException('G·ª≠i tin nh·∫Øn qu√° th·ªùi gian.');
      });

      debugPrint('üì§ ChatRepository: Status code: ${response.statusCode}');
      debugPrint('üì§ ChatRepository: Response: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        debugPrint('‚úÖ ChatRepository: G·ª≠i tin nh·∫Øn th√†nh c√¥ng');
        return {
          'success': true,
          'data': responseData['data'],
        };
      } else if (response.statusCode == 401) {
        debugPrint('‚ùå ChatRepository: L·ªói x√°c th·ª±c 401');
        return {
          'success': false,
          'message': 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
          'error': 'L·ªói x√°c th·ª±c: ${response.body}',
        };
      } else if (response.statusCode == 422) {
        debugPrint('‚ùå ChatRepository: L·ªói d·ªØ li·ªáu 422');
        // Parse l·ªói validation
        Map<String, dynamic> errorData;
        try {
          errorData = json.decode(response.body);
        } catch (e) {
          errorData = {'message': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'};
        }
        return {
          'success': false,
          'message': errorData['message'] ?? 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          'error': 'Validation Error: ${errorData['errors'] ?? response.body}',
        };
      } else {
        debugPrint('‚ùå ChatRepository: L·ªói khi g·ª≠i tin nh·∫Øn: ${response.body}');
        return {
          'success': false,
          'message': 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn',
          'error': response.body,
        };
      }
    } on SocketException catch (e) {
      debugPrint('üîå ChatRepository: SocketException: $e');
      return {
        'success': false,
        'message':
            'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
        'error': e.toString(),
      };
    } on TimeoutException catch (e) {
      debugPrint('‚è±Ô∏è ChatRepository: TimeoutException: $e');
      return {
        'success': false,
        'message': 'G·ª≠i tin nh·∫Øn qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.',
        'error': e.toString(),
      };
    } catch (e) {
      debugPrint('‚ùå ChatRepository: Exception khi g·ª≠i tin nh·∫Øn: $e');
      return {
        'success': false,
        'message': 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i tin nh·∫Øn',
        'error': e.toString(),
      };
    }
  }

  // G·ª≠i tin nh·∫Øn c√≥ ƒë√≠nh k√®m
  Future<Map<String, dynamic>> sendMessageWithAttachment(
      String token, int chatId, String? message, File attachment,
      {Map<String, dynamic>? userInfo}) async {
    try {
      debugPrint('üì§ ChatRepository: ƒêang g·ª≠i tin nh·∫Øn c√≥ ƒë√≠nh k√®m');
      debugPrint('üì§ ChatRepository: File path: ${attachment.path}');

      // X√°c ƒë·ªãnh lo·∫°i t·ªáp qua ph·∫ßn m·ªü r·ªông
      final fileName = attachment.path.split('/').last.toLowerCase();
      final isImage = fileName.endsWith('.jpg') ||
          fileName.endsWith('.jpeg') ||
          fileName.endsWith('.png') ||
          fileName.endsWith('.gif') ||
          fileName.endsWith('.webp');

      // Chu·∫©n b·ªã d·ªØ li·ªáu FormData
      Map<String, dynamic> formDataMap = {
        'chat_id': chatId,
        'message': message ?? '',
        'attachment': await MultipartFile.fromFile(
          attachment.path,
          filename: fileName,
        ),
      };

      // Th√™m th√¥ng tin userInfo n·∫øu c√≥
      if (userInfo != null) {
        formDataMap['user_info'] = json.encode(userInfo);
      }

      // T·∫°o FormData ƒë·ªÉ t·∫£i l√™n
      FormData formData = FormData.fromMap(formDataMap);

      debugPrint(
          'üì§ ChatRepository: ƒêang t·∫£i l√™n ${isImage ? "h√¨nh ·∫£nh" : "t·ªáp ƒë√≠nh k√®m"}: $fileName');

      final response = await _dio.post(
        api_chat_send,
        data: formData,
        options: Options(
          headers: {
            'Authorization': 'Bearer $token',
            'Content-Type': 'multipart/form-data',
          },
          receiveTimeout: const Duration(seconds: 30),
          sendTimeout: const Duration(seconds: 30),
        ),
      );

      debugPrint('üì§ ChatRepository: Status code: ${response.statusCode}');

      if (response.statusCode == 200) {
        final responseData = response.data;
        debugPrint('‚úÖ ChatRepository: G·ª≠i tin nh·∫Øn ƒë√≠nh k√®m th√†nh c√¥ng');

        return {
          'success': true,
          'data': responseData['data'],
        };
      } else {
        debugPrint('‚ùå ChatRepository: L·ªói khi g·ª≠i ƒë√≠nh k√®m: ${response.data}');
        return {
          'success': false,
          'message': 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn',
          'error': response.data,
        };
      }
    } on DioException catch (e) {
      debugPrint(
          '‚ùå ChatRepository: DioException khi g·ª≠i ƒë√≠nh k√®m: ${e.message}');
      final String errorMessage;

      if (e.type == DioExceptionType.connectionTimeout ||
          e.type == DioExceptionType.sendTimeout ||
          e.type == DioExceptionType.receiveTimeout) {
        errorMessage = 'Qu√° th·ªùi gian k·∫øt n·ªëi khi t·∫£i l√™n t·ªáp ƒë√≠nh k√®m';
      } else if (e.type == DioExceptionType.connectionError) {
        errorMessage = 'L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n';
      } else {
        errorMessage = 'L·ªói khi g·ª≠i t·ªáp ƒë√≠nh k√®m: ${e.message}';
      }

      return {
        'success': false,
        'message': errorMessage,
        'error': e.toString(),
      };
    } catch (e) {
      debugPrint('‚ùå ChatRepository: Exception khi g·ª≠i ƒë√≠nh k√®m: $e');
      return {
        'success': false,
        'message': 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i tin nh·∫Øn',
        'error': e.toString(),
      };
    }
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi: G·ª≠i h√¨nh ·∫£nh d∆∞·ªõi d·∫°ng base64
  Future<Map<String, dynamic>> sendImageBase64(String token, int chatId,
      String? message, String base64Image, String imageName,
      {Map<String, dynamic>? userInfo}) async {
    try {
      debugPrint('üì§ ChatRepository: ƒêang g·ª≠i h√¨nh ·∫£nh base64');

      // Ki·ªÉm tra ƒë·ªô d√†i c·ªßa chu·ªói base64 (ph·∫£i l·ªõn h∆°n m·ªôt ng∆∞·ª°ng nh·∫•t ƒë·ªãnh)
      if (base64Image.length < 100) {
        return {
          'success': false,
          'message': 'D·ªØ li·ªáu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá',
          'error': 'Chu·ªói base64 qu√° ng·∫Øn',
        };
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server
      var requestData = {
        'chat_id': chatId,
        'message': message ?? '',
        'image_base64': base64Image,
        'image_name': imageName,
      };

      // Th√™m th√¥ng tin userInfo n·∫øu c√≥
      if (userInfo != null) {
        requestData['user_info'] = userInfo;
      }

      final response = await http
          .post(
        Uri.parse(api_chat_send),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
          'Accept': 'application/json',
        },
        body: json.encode(requestData),
      )
          .timeout(Duration(seconds: 30), onTimeout: () {
        debugPrint('‚è±Ô∏è ChatRepository: Timeout khi g·ª≠i h√¨nh ·∫£nh base64');
        throw TimeoutException('G·ª≠i h√¨nh ·∫£nh qu√° th·ªùi gian.');
      });

      debugPrint('üì§ ChatRepository: Status code: ${response.statusCode}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        debugPrint('‚úÖ ChatRepository: G·ª≠i h√¨nh ·∫£nh base64 th√†nh c√¥ng');

        return {
          'success': true,
          'data': responseData['data'],
        };
      } else if (response.statusCode == 422) {
        debugPrint('‚ùå ChatRepository: L·ªói d·ªØ li·ªáu 422: ${response.body}');
        Map<String, dynamic> errorData;
        try {
          errorData = json.decode(response.body);
        } catch (e) {
          errorData = {'message': 'D·ªØ li·ªáu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá'};
        }

        return {
          'success': false,
          'message': errorData['message'] ?? 'D·ªØ li·ªáu h√¨nh ·∫£nh kh√¥ng h·ª£p l·ªá',
          'error': errorData.toString(),
        };
      } else {
        debugPrint(
            '‚ùå ChatRepository: L·ªói khi g·ª≠i h√¨nh ·∫£nh base64: ${response.body}');
        return {
          'success': false,
          'message': 'Kh√¥ng th·ªÉ g·ª≠i h√¨nh ·∫£nh',
          'error': response.body,
        };
      }
    } on SocketException catch (e) {
      debugPrint('üîå ChatRepository: SocketException: $e');
      return {
        'success': false,
        'message':
            'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
        'error': e.toString(),
      };
    } on TimeoutException catch (e) {
      debugPrint('‚è±Ô∏è ChatRepository: TimeoutException: $e');
      return {
        'success': false,
        'message': 'G·ª≠i h√¨nh ·∫£nh qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.',
        'error': e.toString(),
      };
    } catch (e) {
      debugPrint('‚ùå ChatRepository: Exception khi g·ª≠i h√¨nh ·∫£nh base64: $e');
      return {
        'success': false,
        'message': 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i h√¨nh ·∫£nh',
        'error': e.toString(),
      };
    }
  }

  // L·∫•y l·ªãch s·ª≠ tin nh·∫Øn v·ªõi ph√¢n trang - API s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c GET
  Future<Map<String, dynamic>> getChatHistory(String token, int chatId,
      {int page = 1, int perPage = 20}) async {
    try {
      debugPrint(
          'üîÑ ChatRepository: ƒêang t·∫£i l·ªãch s·ª≠ chat v·ªõi chatId=$chatId, page=$page, perPage=$perPage');

      // API m·ªõi ƒë√£ thay ƒë·ªïi, kh√¥ng c·∫ßn chat_id trong tham s·ªë n·ªØa v√¨ API s·∫Ω t·ª± x√°c ƒë·ªãnh chat c·ªßa ng∆∞·ªùi d√πng
      final url = Uri.parse('$api_chat_history?page=$page&per_page=$perPage');

      debugPrint('üîó ChatRepository: URL API - ${url.toString()}');

      final response = await http.get(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Accept': 'application/json'
        },
      ).timeout(Duration(seconds: 10), onTimeout: () {
        debugPrint('‚è±Ô∏è ChatRepository: Timeout khi g·ªçi API chat history');
        throw TimeoutException('K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° th·ªùi gian.');
      });

      debugPrint(
          'üì¢ ChatRepository: ƒê√£ nh·∫≠n ph·∫£n h·ªìi, status code=${response.statusCode}');

      // In chi ti·∫øt body c·ªßa response
      debugPrint(
          'üìù ChatRepository: Response body: ${response.body.substring(0, min(500, response.body.length))}...');

      if (response.statusCode == 200) {
        Map<String, dynamic> responseData;
        try {
          responseData = json.decode(response.body);
          debugPrint('‚úÖ ChatRepository: Ph·∫£n h·ªìi th√†nh c√¥ng t·ª´ API history');
        } catch (e) {
          debugPrint('‚ùå ChatRepository: L·ªói khi parse JSON: $e');
          return {
            'success': false,
            'message': 'L·ªói ƒë·ªãnh d·∫°ng d·ªØ li·ªáu t·ª´ m√°y ch·ªß',
            'error': e.toString(),
          };
        }

        // Ki·ªÉm tra tr∆∞·ªùng success t·ª´ API
        if (responseData['success'] == false) {
          debugPrint('‚ùå ChatRepository: API tr·∫£ v·ªÅ success=false');
          return {
            'success': false,
            'message':
                responseData['message'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ m√°y ch·ªß',
            'error': responseData['errors'] != null
                ? json.encode(responseData['errors'])
                : 'Unknown error',
          };
        }

        // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
        if (responseData['data'] == null) {
          debugPrint('‚ùå ChatRepository: D·ªØ li·ªáu ph·∫£n h·ªìi thi·∫øu tr∆∞·ªùng "data"');
          return {
            'success': false,
            'message': 'C·∫•u tr√∫c d·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá',
            'error': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: thi·∫øu tr∆∞·ªùng data',
          };
        }

        // L·∫•y chat ID t·ª´ ph·∫£n h·ªìi - API m·ªõi s·∫Ω tr·∫£ v·ªÅ chat_id
        final chatId = responseData['data']['chat_id'];
        debugPrint('üÜî ChatRepository: Chat ID t·ª´ API: $chatId');

        // In c·∫•u tr√∫c chi ti·∫øt c·ªßa data
        debugPrint(
            'üìä ChatRepository: Data structure: ${responseData['data'].keys.toList()}');

        if (responseData['data']['messages'] == null) {
          debugPrint('‚ö†Ô∏è ChatRepository: Kh√¥ng c√≥ tin nh·∫Øn n√†o trong ph·∫£n h·ªìi');
          return {
            'success': true,
            'chatId': chatId, // Th√™m chatId v√†o k·∫øt qu·∫£
            'messages': [], // Tr·∫£ v·ªÅ danh s√°ch tr·ªëng n·∫øu kh√¥ng c√≥ tin nh·∫Øn
            'hasMore': false,
            'nextPage': null,
            'total': 0,
          };
        }

        final List<dynamic> messagesJson = responseData['data']['messages'];
        debugPrint(
            'üìä ChatRepository: ƒê√£ nh·∫≠n ${messagesJson.length} tin nh·∫Øn');

        // In m·∫´u tin nh·∫Øn ƒë·∫ßu ti√™n ƒë·ªÉ debug
        if (messagesJson.isNotEmpty) {
          debugPrint(
              'üì± ChatRepository: M·∫´u tin nh·∫Øn ƒë·∫ßu ti√™n: ${json.encode(messagesJson.first)}');
        }

        try {
          final List<ChatMessage> messages =
              messagesJson.map((json) => ChatMessage.fromJson(json)).toList();

          debugPrint(
              '‚úÖ ChatRepository: ƒê√£ parse th√†nh c√¥ng ${messages.length} tin nh·∫Øn');

          return {
            'success': true,
            'chatId': chatId, // Th√™m chatId v√†o k·∫øt qu·∫£
            'messages': messages,
            'hasMore': responseData['data']['has_more'] ?? false,
            'nextPage': responseData['data']['next_page'],
            'total': responseData['data']['total'] ?? 0,
          };
        } catch (parseError) {
          debugPrint('‚ùå ChatRepository: L·ªói khi parse tin nh·∫Øn: $parseError');

          // Log chi ti·∫øt h∆°n v·ªÅ l·ªói parse
          if (messagesJson.isNotEmpty) {
            try {
              final firstMessage = messagesJson.first;
              debugPrint(
                  'üîç ChatRepository: C·∫•u tr√∫c tin nh·∫Øn: ${firstMessage.keys.toList()}');

              // Th·ª≠ parse tin nh·∫Øn ƒë·∫ßu ti√™n
              ChatMessage.fromJson(firstMessage);
              debugPrint(
                  'üîç ChatRepository: Parse tin nh·∫Øn ƒë·∫ßu ti√™n th√†nh c√¥ng, l·ªói c√≥ th·ªÉ ·ªü tin nh·∫Øn kh√°c');
            } catch (detailError) {
              debugPrint(
                  'üîç ChatRepository: Chi ti·∫øt l·ªói parse tin nh·∫Øn ƒë·∫ßu ti√™n: $detailError');
            }
          }

          return {
            'success': false,
            'message': 'Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu tin nh·∫Øn',
            'error': parseError.toString(),
          };
        }
      } else if (response.statusCode == 401) {
        debugPrint('‚ùå ChatRepository: L·ªói x√°c th·ª±c 401');
        return {
          'success': false,
          'message': 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
          'error': 'L·ªói x√°c th·ª±c: ${response.body}',
          'status_code': 401,
        };
      } else if (response.statusCode == 403) {
        debugPrint('‚ùå ChatRepository: L·ªói quy·ªÅn truy c·∫≠p 403');
        return {
          'success': false,
          'message':
              'B·∫°n kh√¥ng c√≥ quy·ªÅn xem tin nh·∫Øn trong cu·ªôc tr√≤ chuy·ªán n√†y',
          'error': 'L·ªói quy·ªÅn: ${response.body}',
          'status_code': 403,
        };
      } else if (response.statusCode == 422) {
        debugPrint('‚ùå ChatRepository: L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o 422');
        Map<String, dynamic> errorData;
        try {
          errorData = json.decode(response.body);
          debugPrint(
              '‚ùå ChatRepository: L·ªói validation: ${errorData['errors']}');
        } catch (e) {
          errorData = {'message': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'};
        }

        return {
          'success': false,
          'message': errorData['message'] ?? 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
          'error': 'Validation Error: ${errorData['errors'] ?? response.body}',
          'status_code': 422,
        };
      } else if (response.statusCode >= 500) {
        debugPrint('‚ùå ChatRepository: L·ªói server ${response.statusCode}');
        return {
          'success': false,
          'message': 'M√°y ch·ªß ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.',
          'error': 'Server Error: ${response.body}',
          'status_code': response.statusCode,
        };
      } else {
        debugPrint(
            '‚ùì ChatRepository: L·ªói kh√¥ng x√°c ƒë·ªãnh ${response.statusCode}');
        return {
          'success': false,
          'message': 'Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ tin nh·∫Øn',
          'error': 'HTTP Error ${response.statusCode}: ${response.body}',
          'status_code': response.statusCode,
        };
      }
    } on SocketException catch (e) {
      debugPrint('üîå ChatRepository: SocketException: $e');
      return {
        'success': false,
        'message':
            'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.',
        'error': e.toString(),
      };
    } on TimeoutException catch (e) {
      debugPrint('‚è±Ô∏è ChatRepository: TimeoutException: $e');
      return {
        'success': false,
        'message': 'K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i sau.',
        'error': e.toString(),
      };
    } on FormatException catch (e) {
      debugPrint('üìã ChatRepository: FormatException: $e');
      return {
        'success': false,
        'message': 'L·ªói ƒë·ªãnh d·∫°ng d·ªØ li·ªáu t·ª´ m√°y ch·ªß.',
        'error': e.toString(),
      };
    } catch (e) {
      debugPrint('‚ùó ChatRepository: Exception kh√¥ng x√°c ƒë·ªãnh: $e');
      return {
        'success': false,
        'message': 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l·ªãch s·ª≠ tin nh·∫Øn',
        'error': e.toString(),
      };
    }
  }

  // L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
  Future<Map<String, dynamic>> getUnreadCount(String token) async {
    try {
      debugPrint('ChatRepository: ƒêang l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc');
      final response = await http.get(
        Uri.parse(api_chat_unread),
        headers: {
          'Authorization': 'Bearer $token',
          'Accept': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        debugPrint(
            'ChatRepository: S·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: ${responseData['data']['unread_count']}');
        return {
          'success': true,
          'unreadCount': responseData['data']['unread_count'],
        };
      } else {
        debugPrint(
            'ChatRepository: L·ªói khi l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: ${response.body}');
        return {
          'success': false,
          'message': 'Kh√¥ng th·ªÉ t·∫£i s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc',
          'error': response.body,
        };
      }
    } catch (e) {
      debugPrint('ChatRepository: Exception khi l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: $e');
      return {
        'success': false,
        'message': 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc',
        'error': e.toString(),
      };
    }
  }
}
